/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/7c687e39-a313-4390-a97a-49ea4775765d

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLight roomLighting;
  bool doorOpenLED;
  bool fireAlarmLED;
  bool gasAlarmLED;
  bool intruderAlarmLED;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include "DHT.h"
#define DHTTYPE DHT11

#define LED_PIN 5
#define MQ2gasAlarmSensorInput 35
#define MQ9gasAlarmSensorInput 34
#define fireAlarmSensorInput 32
#define intruderAlarmSensorInput 33
#define limitSwitchInput 25
#define temperatureSensorInput 26


void setup() {
  Serial.begin(9600);
  delay(1500);

  // Defined in thingProperties.h
  initProperties();
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  pinMode(LED_PIN, OUTPUT);
  
  fireAlarmLED = false;
  intruderAlarmLED = false;
  doorOpenLED = false;
  
  delay(5000);
}

void loop() {
  ArduinoCloud.update();

  ReadGasAlarmInput();
  ReadFireAlarmInput();
  ReadIntruderAlarmInput();
  
  delay(2);
}

void ReadGasAlarmInput() {
  
  //reading analog sensor data.   
  int MQ2gasLevelValue = analogRead(MQ2gasAlarmSensorInput);
  int MQ9gasLevelValue = analogRead(MQ9gasAlarmSensorInput);
  
  //if threshold is exceeded, gas alarm will occur.
  if (MQ2gasLevelValue > 500 || MQ9gasLevelValue > 2000) {
    gasAlarmLED = true;
  }
  else gasAlarmLED = false;
  
  /*
  //Ölçülen gaz seviyelerini seri monitörde görmek için kullanılan kısım.
  Serial.print("MQ2 gas Level = ");
  Serial.print(MQ2gasLevelValue);
  Serial.print(" MQ9 gas Level = ");
  Serial.println(MQ2gasLevelValue9);
  */
}

void onRoomLightingChange()  {
  if (roomLighting == true) {
    digitalWrite(LED_PIN, HIGH);
  }
  else {
    digitalWrite(LED_PIN, LOW);
  }
}

void ReadFireAlarmInput(){
  int fireAlarmValue = analogRead(fireAlarmSensorInput);
  if(fireAlarmValue > 10000){
    fireAlarmLED = true;
  }
  else fireAlarmLED = false;
  
  /*
  //Yangın sensöründe ölçülen kızılötesi ışık şiddetini seri monitörde görmek için kullanılan kısım.
  Serial.print("Infrared Level= ");
  Serial.println(fireAlarmValue);
  */
}

void ReadIntruderAlarmInput(){
  int intruderAlarmValue = digitalRead(intruderAlarmSensorInput);
  
  if(intruderAlarmValue == HIGH){
    intruderAlarmLED = true;
  }
  else intruderAlarmLED = false;
}

void ReadLimitSwitchInput(){
  int doorOpenValue = digitalRead(limitSwitchInput);
  
  if(doorOpenValue == HIGH){
    doorOpenLED = true;
  }
  else doorOpenLED = false;
}



void onGasAlarmLEDChange()  {
  // Add your code here to act upon GasAlarmLED change
}

void onFireAlarmLEDChange()  {
  // Add your code here to act upon FireAlarmLED change
}
/*
  Since IntruderAlarmLED is READ_WRITE variable, onIntruderAlarmLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIntruderAlarmLEDChange()  {
  // Add your code here to act upon IntruderAlarmLED change
}

/*
  Since DoorOpenLED is READ_WRITE variable, onDoorOpenLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDoorOpenLEDChange()  {
  // Add your code here to act upon DoorOpenLED change
}
